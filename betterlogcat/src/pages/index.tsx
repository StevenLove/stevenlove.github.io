import type { NextPage } from "next";
import {useState, useRef,LegacyRef,useCallback} from "react";
import Head from "next/head";
import * as lib from "../lib";
import {AgGridReact } from 'ag-grid-react';
import * as grid from "../grid"
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-balham.css';
import {processText} from "../processor"

type LogLoaderProps = {
  label: string;
  path: string;
  onTextLoaded: (text: string) => void;
};



const Home: NextPage = () => {


  
let [rowData,setRowData] = useState(grid.initialRowData);
const gridRef = useRef<AgGridReact>() //as LegacyRef<AgGridReact<LogObj>>;
let [columnDefs,setColumnDefs] = useState(grid.initialColDefs);

const getRowHeight = useCallback(function(nodeParams:grid.GridNodeParams){
  let line = nodeParams.data;
  return 20;
  // return line.level == "E" ? 20 : 2;
},[])

  function populateGrid(l:string){
    let x = processText(l);
    // console.log("populateGrid",x);
    setRowData(x);
  }


  console.log("render");
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
        {/* <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Create <span className="text-purple-300">T3</span> App
        </h1> */}
        <iframe src="chrome://settings/">

        </iframe>
        <div>
        <LogLoader 
          path="/logcat30.txt"
          label="example log (30 lines)"
          onTextLoaded={populateGrid}
        />
        <LogLoader 
          path="/logcat400.txt"
          label="example log (400 lines)"
          onTextLoaded={populateGrid}
        />
        <LogLoader 
          path="/logcat7k.txt"
          label="example log (7k lines)"
          onTextLoaded={populateGrid}
        />
        <LogLoader 
          path="/logcat100k.txt"
          label="example log (100k lines)"
          onTextLoaded={populateGrid}
        />
        <LogLoader 
          path="clipboard"
          label="from clipboard"
          onTextLoaded={populateGrid}
        />
        </div>

      <div className="ag-theme-balham" style={{height: 1200, width: "100%"}}>
           <AgGridReact
               ref={gridRef as LegacyRef<AgGridReact<grid.GridObj>>}
               rowData={rowData}
               columnDefs={columnDefs}
               rowHeight={grid.ROW_HEIGHT}
               rowBuffer={grid.ROW_BUFFER}
               enableCellTextSelection={true} // allow text selection in cells
               ensureDomOrder={true}          // allow text selection in cells
              //  getRowHeight={getRowHeight}
               >
           </AgGridReact>
       </div>
      </main>
    </>
  );
};



const LogLoader = ({
  label,
  path,
  onTextLoaded,
}: LogLoaderProps) => {
  
  return (
    <span className="inline-block">
    <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded" onClick={function(e){
      if(path=="clipboard"){
        let p = lib.copyFromClipboard();
        lib.time("copy from clipboard",p);
        p.then(onTextLoaded);
      }else{
        let p = fetch(path).then(p=>p.text());
        lib.time(`load from ${path}`,p);
        p.then(onTextLoaded);
      }
      }}>
        load {label}
    </button>
    </span>

  )
};





export default Home;
